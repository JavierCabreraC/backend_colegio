#!/usr/bin/env python3
"""
Script para generar datos acad√©micos completos del a√±o 2022
"""

import os
import django
import random
import sys
from datetime import date, timedelta, datetime, time
from faker import Faker

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend_colegio.settings')
django.setup()

# Importar modelos
from authentication.models import Usuario, Profesor, Alumno
from academic.models import (
    Nivel, Grupo, Materia, Aula, ProfesorMateria,
    Gestion, Trimestre, Horario, Matriculacion
)
from evaluations.models import (
    Examen, NotaExamen, Tarea, NotaTarea,
    Asistencia, Participacion, EstadoAsistencia
)

fake = Faker('es_ES')
random.seed(2022)

# Configuraci√≥n
YEAR = 2022
STUDENTS_PER_GROUP = 20
TOTAL_STUDENTS = 240

# Materias adicionales (C√ìDIGOS M√ÅS CORTOS)
NUEVAS_MATERIAS = [
    ('BIO', 'Biolog√≠a', 'Ciencias Naturales', 4),
    ('GEO', 'Geograf√≠a', 'Geograf√≠a Bolivia', 3),  # ‚úÖ Reducido
    ('HIS', 'Historia', 'Historia Universal', 3),
    ('EDF', 'Ed. F√≠sica', 'Deportes', 2),  # ‚úÖ Reducido
    ('ING', 'Ingl√©s', 'Idioma Extranjero', 3),
    ('ART', 'Artes', 'Expresi√≥n Art√≠stica', 2),  # ‚úÖ Reducido
    ('MUS', 'M√∫sica', 'Educaci√≥n Musical', 2)
]

# Perfiles de estudiantes para ML
STUDENT_PROFILES = {
    'excelente': {
        'peso': 15,
        'nota_base': (85, 98),
        'asistencia_rate': 0.96,
        'participacion_freq': 0.85,
        'tendencia': 'estable'
    },
    'bueno': {
        'peso': 35,
        'nota_base': (70, 84),
        'asistencia_rate': 0.90,
        'participacion_freq': 0.65,
        'tendencia': 'mejora'
    },
    'regular': {
        'peso': 35,
        'nota_base': (55, 69),
        'asistencia_rate': 0.78,
        'participacion_freq': 0.45,
        'tendencia': 'irregular'
    },
    'bajo': {
        'peso': 15,
        'nota_base': (25, 54),
        'asistencia_rate': 0.65,
        'participacion_freq': 0.25,
        'tendencia': 'declive'
    }
}

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO CREACI√ìN DEL A√ëO ACAD√âMICO 2022 - VERSI√ìN CORREGIDA")
    print("=" * 70)

    try:
        # 1. Completar estructura b√°sica
        print("\nüè´ PASO 1: Completando estructura b√°sica...")
        create_basic_structure()

        # 2. Completar profesores
        print("\nüë®‚Äçüè´ PASO 2: Completando profesores...")
        create_additional_professors()

        # 3. Crear a√±o acad√©mico 2022
        print("\nüìÖ PASO 3: Creando a√±o acad√©mico 2022...")
        create_academic_year_2022()

        # 4. Crear alumnos
        print("\nüéì PASO 4: Creando alumnos...")
        create_students()

        # 5. Asignar profesores a materias
        print("\nüìã PASO 5: Asignando profesores a materias...")
        create_assignments()

        # 6. Crear horarios
        print("\nüóìÔ∏è PASO 6: Creando horarios...")
        create_schedules()

        # 7. Generar datos acad√©micos
        print("\nüìä PASO 7: Generando datos acad√©micos...")
        create_academic_data()

        print("\n" + "=" * 70)
        print("üéâ CREACI√ìN COMPLETADA EXITOSAMENTE")
        print_final_summary()

    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

def create_basic_structure():
    """Crear niveles, grupos, materias adicionales, aulas"""

    # 1. Niveles (1¬∞ a 6¬∞ secundaria) - TEXTOS CORTOS
    for i in range(1, 7):
        nivel, created = Nivel.objects.get_or_create(
            numero=i,
            defaults={
                'nombre': f'{i}¬∞ Secundaria',  # ‚úÖ 13 caracteres m√°ximo
                'descripcion': f'Nivel {i}'     # ‚úÖ 7 caracteres m√°ximo
            }
        )
        if created:
            print(f"  ‚úÖ Nivel {i}¬∞ creado")

    # 2. Grupos (A y B por cada nivel)
    grupos_creados = 0
    for nivel in Nivel.objects.all():
        for letra in ['A', 'B']:
            grupo, created = Grupo.objects.get_or_create(
                nivel=nivel,
                letra=letra,
                defaults={'capacidad_maxima': 25}
            )
            if created:
                grupos_creados += 1
                print(f"  ‚úÖ Grupo {nivel.numero}¬∞{letra} creado")

    # 3. Materias adicionales - DESCRIPCIONES CORTAS
    materias_creadas = 0
    for codigo, nombre, desc, horas in NUEVAS_MATERIAS:
        materia, created = Materia.objects.get_or_create(
            codigo=codigo,
            defaults={
                'nombre': nombre,
                'descripcion': desc[:40],  # ‚úÖ Truncar a 40 caracteres
                'horas_semanales': horas
            }
        )
        if created:
            materias_creadas += 1
            print(f"  ‚úÖ Materia {codigo} - {nombre} creada")

    # 4. Aulas (15 aulas) - DESCRIPCIONES CORTAS
    aulas_creadas = 0
    for i in range(1, 16):
        aula, created = Aula.objects.get_or_create(
            nombre=f'Aula {i:02d}',
            defaults={
                'capacidad': random.randint(30, 40),
                'descripcion': f'Sala {i}'  # ‚úÖ Descripci√≥n corta
            }
        )
        if created:
            aulas_creadas += 1

    print(f"  üìä Resumen: {grupos_creados} grupos, {materias_creadas} materias, {aulas_creadas} aulas creadas")

def create_additional_professors():
    """Crear profesores adicionales - DIRECCIONES CORTAS"""

    profesores_data = [
        {
            'email': 'profesor6@sistema.com',
            'password': 'prof303',
            'nombres': 'Ana Luc√≠a',
            'apellidos': 'Morales Vera',
            'cedula_identidad': '66666666',
            'fecha_nacimiento': date(1986, 4, 12),
            'genero': 'F',
            'telefono': '77890123',
            'direccion': 'Barrio Equipetrol Norte'[:60],  # ‚úÖ Truncar
            'especialidad': 'Biolog√≠a',
            'fecha_contratacion': date(2019, 3, 1)
        },
        {
            'email': 'profesor7@sistema.com',
            'password': 'prof404',
            'nombres': 'Diego Alejandro',
            'apellidos': 'S√°nchez Rojas',
            'cedula_identidad': '77777777',
            'fecha_nacimiento': date(1983, 9, 28),
            'genero': 'M',
            'telefono': '78901234',
            'direccion': 'Radial 10 y 4to Anillo'[:60],  # ‚úÖ Truncar
            'especialidad': 'Geograf√≠a',
            'fecha_contratacion': date(2017, 8, 15)
        },
        {
            'email': 'profesor8@sistema.com',
            'password': 'prof505',
            'nombres': 'Patricia Isabel',
            'apellidos': 'Flores Gutierrez',
            'cedula_identidad': '88888888',
            'fecha_nacimiento': date(1988, 1, 17),
            'genero': 'F',
            'telefono': '79012345',
            'direccion': 'Villa Primero de Mayo'[:60],  # ‚úÖ Truncar
            'especialidad': 'Educaci√≥n F√≠sica',
            'fecha_contratacion': date(2020, 2, 10)
        },
        {
            'email': 'profesor9@sistema.com',
            'password': 'prof606',
            'nombres': 'Michael James',
            'apellidos': 'Thompson Wilson',
            'cedula_identidad': '99999999',
            'fecha_nacimiento': date(1985, 6, 5),
            'genero': 'M',
            'telefono': '70123890',
            'direccion': 'Av. San Mart√≠n 567'[:60],  # ‚úÖ Truncar
            'especialidad': 'Ingl√©s',
            'fecha_contratacion': date(2018, 9, 1)
        },
        {
            'email': 'profesor10@sistema.com',
            'password': 'prof707',
            'nombres': 'Carla Beatriz',
            'apellidos': 'Medina Castro',
            'cedula_identidad': '10101010',
            'fecha_nacimiento': date(1984, 11, 22),
            'genero': 'F',
            'telefono': '71234890',
            'direccion': 'Zona Norte, Calle 21'[:60],  # ‚úÖ Truncar
            'especialidad': 'Artes',
            'fecha_contratacion': date(2019, 6, 1)
        },
        {
            'email': 'profesor11@sistema.com',
            'password': 'prof808',
            'nombres': 'Rodrigo Sebasti√°n',
            'apellidos': 'Vargas Pe√±a',
            'cedula_identidad': '11111100',
            'fecha_nacimiento': date(1981, 8, 14),
            'genero': 'M',
            'telefono': '72345890',
            'direccion': 'Barrio Las Palmas'[:60],  # ‚úÖ Truncar
            'especialidad': 'M√∫sica',
            'fecha_contratacion': date(2016, 4, 15)
        }
    ]

    profesores_creados = 0
    for profesor_data in profesores_data:
        email = profesor_data['email']

        if not Usuario.objects.filter(email=email).exists():
            # Crear usuario
            usuario = Usuario.objects.create_user(
                email=profesor_data['email'],
                password=profesor_data['password'],
                tipo_usuario='profesor'
            )

            # Crear perfil de profesor
            profesor = Profesor.objects.create(
                usuario=usuario,
                nombres=profesor_data['nombres'],
                apellidos=profesor_data['apellidos'],
                cedula_identidad=profesor_data['cedula_identidad'],
                fecha_nacimiento=profesor_data['fecha_nacimiento'],
                genero=profesor_data['genero'],
                telefono=profesor_data['telefono'],
                direccion=profesor_data['direccion'],
                especialidad=profesor_data['especialidad'][:20],  # ‚úÖ Truncar especialidad
                fecha_contratacion=profesor_data['fecha_contratacion']
            )

            profesores_creados += 1
            print(f"  ‚úÖ Profesor creado: {profesor_data['nombres']} {profesor_data['apellidos']} - {profesor_data['especialidad']}")

    print(f"  üìä Total profesores ahora: {Profesor.objects.count()}")

def create_academic_year_2022():
    """Crear gesti√≥n 2022 con sus trimestres"""

    # Crear gesti√≥n 2022
    gestion, created = Gestion.objects.get_or_create(
        anio=YEAR,
        defaults={
            'nombre': f'Gesti√≥n Acad√©mica {YEAR}',
            'fecha_inicio': date(YEAR, 2, 1),
            'fecha_fin': date(YEAR, 11, 30),
            'activa': False
        }
    )

    if created:
        print(f"  ‚úÖ Gesti√≥n {YEAR} creada")

        # Crear trimestres
        trimestres_data = [
            (1, 'Primer Trimestre 2022', date(YEAR, 2, 1), date(YEAR, 5, 15)),
            (2, 'Segundo Trimestre 2022', date(YEAR, 5, 16), date(YEAR, 8, 31)),
            (3, 'Tercer Trimestre 2022', date(YEAR, 9, 1), date(YEAR, 11, 30))
        ]

        for num, nombre, inicio, fin in trimestres_data:
            trimestre = Trimestre.objects.create(
                gestion=gestion,
                numero=num,
                nombre=nombre,
                fecha_inicio=inicio,
                fecha_fin=fin
            )
            print(f"  ‚úÖ {nombre} creado ({inicio} - {fin})")
    else:
        print(f"  ‚ö†Ô∏è Gesti√≥n {YEAR} ya exist√≠a")

def create_students():
    """Crear 240 alumnos (20 por grupo) y matricularlos"""

    gestion = Gestion.objects.get(anio=YEAR)
    grupos = list(Grupo.objects.all().order_by('nivel__numero', 'letra'))

    alumno_counter = 1
    total_created = 0

    for grupo in grupos:
        print(f"  üìö Grupo {grupo.nivel.numero}¬∞{grupo.letra}...")

        for i in range(STUDENTS_PER_GROUP):
            # Generar datos realistas
            genero = random.choice(['M', 'F'])
            nombres = fake.first_name_male() if genero == 'M' else fake.first_name_female()
            apellidos = f"{fake.last_name()} {fake.last_name()}"

            # Email √∫nico
            email = f"alumno{YEAR}{alumno_counter:03d}@sistema.com"

            if not Usuario.objects.filter(email=email).exists():
                # Crear usuario
                usuario = Usuario.objects.create_user(
                    email=email,
                    password='alumno123',
                    tipo_usuario='alumno'
                )

                # Edad apropiada para el nivel
                edad_base = 12 + grupo.nivel.numero
                fecha_nac = date(YEAR - edad_base, random.randint(1, 12), random.randint(1, 28))

                # Crear alumno - CAMPOS TRUNCADOS
                alumno = Alumno.objects.create(
                    usuario=usuario,
                    grupo=grupo,
                    matricula=f"{YEAR}{alumno_counter:03d}",
                    nombres=nombres[:100],  # Max 100
                    apellidos=apellidos[:100],  # Max 100
                    fecha_nacimiento=fecha_nac,
                    genero=genero,
                    telefono=f"6{random.randint(1000000, 9999999)}"[:10],  # Max 10
                    direccion=fake.address()[:60],  # Max 60
                    nombre_tutor=fake.name()[:50],  # Max 50
                    telefono_tutor=f"7{random.randint(1000000, 9999999)}"[:10]  # Max 10
                )

                # Asignar perfil de rendimiento
                profile_name = random.choices(
                    list(STUDENT_PROFILES.keys()),
                    weights=[p['peso'] for p in STUDENT_PROFILES.values()]
                )[0]

                # Matricular en gesti√≥n 2022
                Matriculacion.objects.create(
                    alumno=alumno,
                    gestion=gestion,
                    fecha_matriculacion=date(YEAR, 1, 15),
                    activa=True,
                    observaciones=f'Perfil: {profile_name}'[:50]  # ‚úÖ Max 50
                )

                total_created += 1

            alumno_counter += 1

    print(f"  ‚úÖ {total_created} alumnos creados y matriculados en {YEAR}")

def create_assignments():
    """Asignar profesores a materias"""

    # Mapeo corregido
    especialidad_materia = {
        'Matem√°ticas': ['MAT'],
        'F√≠sica': ['FIS'],
        'Qu√≠mica': ['QUI'],
        'Lenguaje': ['LIT'],  # Asumiendo que LIT existe
        'Historia': ['HIS'],
        'Biolog√≠a': ['BIO'],
        'Geograf√≠a': ['GEO'],
        'Educaci√≥n F√≠sica': ['EDF'],
        'Ingl√©s': ['ING'],
        'Artes': ['ART'],
        'M√∫sica': ['MUS']
    }

    asignaciones_creadas = 0

    for profesor in Profesor.objects.all():
        especialidad = profesor.especialidad

        # Materia principal
        if especialidad in especialidad_materia:
            for codigo_materia in especialidad_materia[especialidad]:
                try:
                    materia = Materia.objects.get(codigo=codigo_materia)
                    pm, created = ProfesorMateria.objects.get_or_create(
                        profesor=profesor,
                        materia=materia
                    )
                    if created:
                        asignaciones_creadas += 1
                        print(f"  ‚úÖ {profesor.nombres} {profesor.apellidos} ‚Üí {materia.nombre}")
                except Materia.DoesNotExist:
                    print(f"  ‚ö†Ô∏è Materia {codigo_materia} no encontrada para {especialidad}")

        # Materia secundaria aleatoria
        if random.random() < 0.3:  # 30% ense√±an segunda materia
            materias_disponibles = list(Materia.objects.exclude(
                profesormateria__profesor=profesor
            ))
            if materias_disponibles:
                materia_extra = random.choice(materias_disponibles)
                pm, created = ProfesorMateria.objects.get_or_create(
                    profesor=profesor,
                    materia=materia_extra
                )
                if created:
                    asignaciones_creadas += 1
                    print(f"  ‚úÖ {profesor.nombres} {profesor.apellidos} ‚Üí {materia_extra.nombre} (extra)")

    print(f"  üìä Total asignaciones: {asignaciones_creadas}")

def create_schedules():
    """Crear horarios b√°sicos"""

    trimestres = Trimestre.objects.filter(gestion__anio=YEAR)
    grupos = Grupo.objects.all()
    aulas = list(Aula.objects.all())
    profesor_materias = list(ProfesorMateria.objects.all())

    if not profesor_materias:
        print("  ‚ö†Ô∏è No hay asignaciones profesor-materia. Saltando horarios.")
        return

    horarios_creados = 0

    for trimestre in trimestres:
        print(f"  üìÖ {trimestre.nombre}...")

        for grupo in grupos:
            # M√°ximo 6 materias por grupo para evitar conflictos
            materias_grupo = random.sample(
                profesor_materias,
                min(6, len(profesor_materias))
            )

            horario_idx = 0
            for dia in range(1, 6):  # Lunes a Viernes
                hora_inicio = time(8, 0)  # 8:00 AM

                # M√°ximo 2 per√≠odos por d√≠a
                for periodo in range(2):
                    if horario_idx < len(materias_grupo):
                        pm = materias_grupo[horario_idx]
                        aula = random.choice(aulas)

                        # Hora fin
                        inicio_dt = datetime.combine(date.today(), hora_inicio)
                        fin_dt = inicio_dt + timedelta(minutes=50)
                        hora_fin = fin_dt.time()

                        # Crear horario sin validaci√≥n compleja por ahora
                        try:
                            Horario.objects.create(
                                profesor_materia=pm,
                                grupo=grupo,
                                aula=aula,
                                trimestre=trimestre,
                                dia_semana=dia,
                                hora_inicio=hora_inicio,
                                hora_fin=hora_fin
                            )
                            horarios_creados += 1
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è Error creando horario: {str(e)[:50]}...")

                        horario_idx += 1
                        hora_inicio = (fin_dt + timedelta(minutes=10)).time()

    print(f"  ‚úÖ {horarios_creados} horarios creados")

def create_academic_data():
    """Generar datos acad√©micos b√°sicos"""
    print("  üîÑ Generando muestra de datos acad√©micos...")

    gestion = Gestion.objects.get(anio=YEAR)
    trimestres = Trimestre.objects.filter(gestion=gestion)
    matriculaciones = list(Matriculacion.objects.filter(gestion=gestion))
    profesor_materias = list(ProfesorMateria.objects.all())

    if not profesor_materias:
        print("  ‚ö†Ô∏è No hay asignaciones. Saltando datos acad√©micos.")
        return

    # Contadores
    examenes_creados = 0
    notas_creadas = 0

    print("    üìù Creando muestra de ex√°menes y notas...")

    # Solo crear una muestra para evitar timeouts
    for trimestre in trimestres[:2]:  # Solo 2 trimestres
        for pm in profesor_materias[:5]:  # Solo 5 profesor-materias
            # 1 examen por combinaci√≥n
            examen = Examen.objects.create(
                profesor_materia=pm,
                trimestre=trimestre,
                numero_parcial=1,
                titulo=f"Examen {pm.materia.codigo} - T{trimestre.numero}"[:100],
                descripcion=f"Evaluaci√≥n {trimestre.numero}"[:100],
                fecha_examen=fake.date_between(
                    start_date=trimestre.fecha_inicio,
                    end_date=trimestre.fecha_fin
                ),
                ponderacion=25.0
            )
            examenes_creados += 1

            # Crear notas para una muestra de alumnos
            muestra_alumnos = random.sample(matriculaciones, min(10, len(matriculaciones)))

            for matriculacion in muestra_alumnos:
                # Obtener perfil del alumno de las observaciones
                obs = matriculacion.observaciones or ''
                if 'excelente' in obs:
                    nota = random.uniform(85, 98)
                elif 'bueno' in obs:
                    nota = random.uniform(70, 84)
                elif 'regular' in obs:
                    nota = random.uniform(55, 69)
                else:
                    nota = random.uniform(25, 54)

                NotaExamen.objects.create(
                    matriculacion=matriculacion,
                    examen=examen,
                    nota=round(nota, 1),
                    observaciones=f"Nota T{trimestre.numero}"[:100]
                )
                notas_creadas += 1

    print(f"    ‚úÖ Muestra creada: {examenes_creados} ex√°menes, {notas_creadas} notas")

def print_final_summary():
    """Mostrar resumen final"""
    print("\nüìä RESUMEN FINAL DEL A√ëO ACAD√âMICO 2022:")
    print("-" * 50)

    print(f"üè´ Estructura:")
    print(f"   ‚Ä¢ Niveles: {Nivel.objects.count()}")
    print(f"   ‚Ä¢ Grupos: {Grupo.objects.count()}")
    print(f"   ‚Ä¢ Materias: {Materia.objects.count()}")
    print(f"   ‚Ä¢ Aulas: {Aula.objects.count()}")

    print(f"\nüë• Personal:")
    print(f"   ‚Ä¢ Profesores: {Profesor.objects.count()}")
    print(f"   ‚Ä¢ Alumnos: {Alumno.objects.count()}")

    gestion_2022 = Gestion.objects.filter(anio=2022).first()
    if gestion_2022:
        print(f"\nüìÖ Gesti√≥n 2022:")
        print(f"   ‚Ä¢ Trimestres: {Trimestre.objects.filter(gestion=gestion_2022).count()}")
        print(f"   ‚Ä¢ Matriculaciones: {Matriculacion.objects.filter(gestion=gestion_2022).count()}")
        print(f"   ‚Ä¢ Horarios: {Horario.objects.filter(trimestre__gestion=gestion_2022).count()}")

    print(f"\nüìä Datos Acad√©micos:")
    print(f"   ‚Ä¢ Asignaciones: {ProfesorMateria.objects.count()}")
    print(f"   ‚Ä¢ Ex√°menes: {Examen.objects.count()}")
    print(f"   ‚Ä¢ Notas: {NotaExamen.objects.count()}")

    print(f"\nüîê Credenciales de Prueba:")
    print(f"   ‚Ä¢ Director: director1@sistema.com / director123")
    print(f"   ‚Ä¢ Profesor: profesor1@sistema.com / prof123")
    print(f"   ‚Ä¢ Alumno: alumno2022001@sistema.com / alumno123")

if __name__ == '__main__':
    main()

